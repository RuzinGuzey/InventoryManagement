// <auto-generated />
using System;
using InventoryManagement.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InventoryManagement.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InventoryManagement.Domain.Entities.Communication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OperatorId")
                        .HasColumnType("integer");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ProtocolName")
                        .HasColumnType("text");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<int>("Service")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OperatorId");

                    b.ToTable("Communications");
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.Debit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int>("InventoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InventoryId");

                    b.ToTable("Debits");
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.Insurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AttachmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeadLineDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FirstInsuranceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float?>("InsuranceAmount")
                        .HasColumnType("real");

                    b.Property<int>("InsuranceType")
                        .HasColumnType("integer");

                    b.Property<string>("LicencePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VehicleInventoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VehicleInventoryId");

                    b.ToTable("Insurances");
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("GuaranteeEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("GuaranteeStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InventoryGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Marka")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("SeriNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WhereAbout")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InventoryGroupId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.InventoryGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("InventoryGroups");
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.Maintenance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateDelivered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("IssuedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OperationDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float?>("Price")
                        .HasColumnType("real");

                    b.Property<int>("ProcessType")
                        .HasColumnType("integer");

                    b.Property<string>("TechnicalServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Maintenances");
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.Operator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.VehicleInspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InspectionResult")
                        .HasColumnType("text");

                    b.Property<string>("LicencePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MotorNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SasiNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TechnicalServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VehicleInventoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VehicleInventoryId");

                    b.ToTable("VehicleInspections");
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.VehicleInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicencePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Marka")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("ModelYear")
                        .HasColumnType("smallint");

                    b.Property<string>("MotorNo")
                        .HasColumnType("text");

                    b.Property<string>("SasiNo")
                        .HasColumnType("text");

                    b.Property<int?>("Segment")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("VehicleInventories");
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.Communication", b =>
                {
                    b.HasOne("InventoryManagement.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("InventoryManagement.Domain.Entities.Operator", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.Debit", b =>
                {
                    b.HasOne("InventoryManagement.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Domain.Entities.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.Insurance", b =>
                {
                    b.HasOne("InventoryManagement.Domain.Entities.VehicleInventory", "VehicleInventory")
                        .WithMany()
                        .HasForeignKey("VehicleInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleInventory");
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.Inventory", b =>
                {
                    b.HasOne("InventoryManagement.Domain.Entities.InventoryGroup", "InventoryGroup")
                        .WithMany("Inventories")
                        .HasForeignKey("InventoryGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryGroup");
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.InventoryGroup", b =>
                {
                    b.HasOne("InventoryManagement.Domain.Entities.InventoryGroup", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.Maintenance", b =>
                {
                    b.HasOne("InventoryManagement.Domain.Entities.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId");

                    b.HasOne("InventoryManagement.Domain.Entities.VehicleInventory", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");

                    b.Navigation("Inventory");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.VehicleInspection", b =>
                {
                    b.HasOne("InventoryManagement.Domain.Entities.VehicleInventory", "VehicleInventory")
                        .WithMany()
                        .HasForeignKey("VehicleInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleInventory");
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.InventoryGroup", b =>
                {
                    b.Navigation("Inventories");
                });
#pragma warning restore 612, 618
        }
    }
}
